{"file":"C:\\Users\\josea\\Documents\\wordle\\src\\Contexts\\levita\\WordPickers\\infrastructure\\persistence\\MongoWordPickerRepository.ts","mappings":";;;;;;;;;;;;AAAA,yGAAqG;AAIrG,iCAAiC;AAEjC,+CAA+C;AAC/C,IAAI;AAEJ,MAAa,yBAA0B,SAAQ,iCAA2B;IAE5D,OAAO;;YACnB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAC3C,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAA;YAEjD,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;YAEjC,OAAO,WAAW,CAAA;QACnB,CAAC;KAAA;IAEK,aAAa,CAAC,IAAY;;YAE/B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAC3C,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAA;YAEjD,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;YAE5B,IAAI,CAAC,WAAW,EAAE;gBACjB,MAAM,UAAU,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,CAAC,CAAA;aACpC;YAED,UAAU,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAA;QAC5F,CAAC;KAAA;IAES,cAAc;QACvB,OAAO,aAAa,CAAA;IACrB,CAAC;CACD;AA5BD,8DA4BC","names":[],"sources":["C:\\Users\\josea\\Documents\\wordle\\src\\Contexts\\levita\\WordPickers\\infrastructure\\persistence\\MongoWordPickerRepository.ts"],"sourcesContent":["import { MongoRepository } from '../../../../shared/infrastructure/persistence/mongo/MongoRepository'\nimport { WordPicker } from '../../domain/WordPicker'\nimport { WordPickerRepository } from '../../domain/WordPickerRepository'\n\n// interface WordPickerDocument {\n\n// \t/* todo: agrega los campos de tu entidad */\n// }\n\nexport class MongoWordPickerRepository extends MongoRepository<WordPicker> implements WordPickerRepository {\n\t\n\tpublic async getLast(): Promise<string> {\n\t\tconst collection = await this.collection();\n\t\tconst words = await collection.find({}).toArray()\n\t\t\n\t\tconst currentWord = words[0].word\n\n\t\treturn currentWord\n\t}\n\t\n\tasync updateGeneric(word: string): Promise<void> {\n\n\t\tconst collection = await this.collection();\n\t\tconst words = await collection.find({}).toArray()\n\t\t\n\t\tconst currentWord = words[0]\n\n\t\tif (!currentWord) {\n\t\t\tawait collection.insertOne({ word })\n\t\t}\n\n\t\tcollection.updateOne({ _id: currentWord._id }, { $set: { word: word } }, { upsert: false })\n\t}\n\n\tprotected collectionName(): string {\n\t\treturn 'wordPickers'\n\t}\n}\n"],"version":3}