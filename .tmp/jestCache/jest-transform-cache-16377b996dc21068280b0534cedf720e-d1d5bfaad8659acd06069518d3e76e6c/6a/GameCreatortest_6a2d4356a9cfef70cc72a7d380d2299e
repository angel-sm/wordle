c5504e7e561c6062536b42a381c3eb5e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GameCreator_1 = require("../../../../../src/contexts/levita/Games/application/GameCreator");
const GameMother_1 = require("../domain/GameMother");
const GameRepositoryMock_1 = require("../__mocks__/GameRepositoryMock");
const CreateGameRequestMother_1 = require("./CreateGameRequestMother");
let repository;
let creator;
beforeEach(() => {
    repository = new GameRepositoryMock_1.GameRepositoryMock();
    creator = new GameCreator_1.GameCreator(repository);
});
describe('GameCreator', () => {
    it('should create a valid Game', () => __awaiter(void 0, void 0, void 0, function* () {
        const request = CreateGameRequestMother_1.CreateGameRequestMother.generate();
        const Game = GameMother_1.GameMother.fromRequest(request);
        yield creator.insertGame(request);
        repository.findOne(Game.id);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxqb3NlYVxcRG9jdW1lbnRzXFx3b3JkbGVcXHRlc3RzXFxjb250ZXh0c1xcbGV2aXRhXFxHYW1lc1xcYXBwbGljYXRpb25cXEdhbWVDcmVhdG9yLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQSxrR0FBK0Y7QUFDL0YscURBQWtEO0FBQ2xELHdFQUFxRTtBQUNyRSx1RUFBb0U7QUFFcEUsSUFBSSxVQUE4QixDQUFDO0FBQ25DLElBQUksT0FBb0IsQ0FBQztBQUV6QixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsVUFBVSxHQUFHLElBQUksdUNBQWtCLEVBQUUsQ0FBQztJQUN0QyxPQUFPLEdBQUcsSUFBSSx5QkFBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3hDLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDM0IsRUFBRSxDQUFDLDRCQUE0QixFQUFFLEdBQVMsRUFBRTtRQUMxQyxNQUFNLE9BQU8sR0FBRyxpREFBdUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVuRCxNQUFNLElBQUksR0FBRyx1QkFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxNQUFNLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9zZWFcXERvY3VtZW50c1xcd29yZGxlXFx0ZXN0c1xcY29udGV4dHNcXGxldml0YVxcR2FtZXNcXGFwcGxpY2F0aW9uXFxHYW1lQ3JlYXRvci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBHYW1lQ3JlYXRvciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NyYy9jb250ZXh0cy9sZXZpdGEvR2FtZXMvYXBwbGljYXRpb24vR2FtZUNyZWF0b3InO1xyXG5pbXBvcnQgeyBHYW1lTW90aGVyIH0gZnJvbSAnLi4vZG9tYWluL0dhbWVNb3RoZXInO1xyXG5pbXBvcnQgeyBHYW1lUmVwb3NpdG9yeU1vY2sgfSBmcm9tICcuLi9fX21vY2tzX18vR2FtZVJlcG9zaXRvcnlNb2NrJztcclxuaW1wb3J0IHsgQ3JlYXRlR2FtZVJlcXVlc3RNb3RoZXIgfSBmcm9tICcuL0NyZWF0ZUdhbWVSZXF1ZXN0TW90aGVyJztcclxuXHJcbmxldCByZXBvc2l0b3J5OiBHYW1lUmVwb3NpdG9yeU1vY2s7XHJcbmxldCBjcmVhdG9yOiBHYW1lQ3JlYXRvcjtcclxuXHJcbmJlZm9yZUVhY2goKCkgPT4ge1xyXG4gIHJlcG9zaXRvcnkgPSBuZXcgR2FtZVJlcG9zaXRvcnlNb2NrKCk7XHJcbiAgY3JlYXRvciA9IG5ldyBHYW1lQ3JlYXRvcihyZXBvc2l0b3J5KTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnR2FtZUNyZWF0b3InLCAoKSA9PiB7XHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYSB2YWxpZCBHYW1lJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IENyZWF0ZUdhbWVSZXF1ZXN0TW90aGVyLmdlbmVyYXRlKCk7XHJcblxyXG4gICAgY29uc3QgR2FtZSA9IEdhbWVNb3RoZXIuZnJvbVJlcXVlc3QocmVxdWVzdCk7XHJcblxyXG4gICAgYXdhaXQgY3JlYXRvci5pbnNlcnRHYW1lKHJlcXVlc3QpO1xyXG5cclxuICAgIHJlcG9zaXRvcnkuZmluZE9uZShHYW1lLmlkKTtcclxuICB9KTtcclxufSk7Il0sInZlcnNpb24iOjN9