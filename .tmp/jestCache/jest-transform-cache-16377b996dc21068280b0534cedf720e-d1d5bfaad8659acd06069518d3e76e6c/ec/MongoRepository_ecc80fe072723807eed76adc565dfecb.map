{"file":"C:\\Users\\josea\\Documents\\wordle\\src\\Contexts\\shared\\infrastructure\\persistence\\mongo\\MongoRepository.ts","mappings":";;;;;;;;;;;;AAEA,kFAA8E;AAE9E,MAAsB,eAAe;IACpC,YAAoB,OAA6B;QAA7B,YAAO,GAAP,OAAO,CAAsB;IAAG,CAAC;IAI3C,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAA;IACpB,CAAC;IAEe,UAAU;;YACzB,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAA;QACnE,CAAC;KAAA;IAEe,SAAS,CAAC,EAAU,EAAE,aAAgB;;YACrD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;YAE1C,MAAM,QAAQ,mCAAQ,aAAa,CAAC,YAAY,EAAE,KAAE,GAAG,EAAE,EAAE,GAAE,CAAA;YAE7D,MAAM,UAAU,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAA;QAC9E,CAAC;KAAA;IAEe,MAAM,CAAC,aAAgB;;YACtC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;YAE1C,MAAM,QAAQ,qBAAQ,aAAa,CAAC,YAAY,EAAE,CAAE,CAAA;YAEpD,MAAM,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;QACrC,CAAC;KAAA;IAEe,MAAM,CAAC,EAAU;;YAChC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;YAE1C,UAAU,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,iCAAe,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;QAClG,CAAC;KAAA;CACD;AAlCD,0CAkCC","names":[],"sources":["C:\\Users\\josea\\Documents\\wordle\\src\\Contexts\\shared\\infrastructure\\persistence\\mongo\\MongoRepository.ts"],"sourcesContent":["import { Collection, MongoClient } from 'mongodb'\nimport { AggregateRoot } from '../../../domain/AggregateRoot'\nimport { DateValueObject } from '../../../domain/value-object/DateValueObject'\n\nexport abstract class MongoRepository<T extends AggregateRoot> {\n\tconstructor(private _client: Promise<MongoClient>) {}\n\n\tprotected abstract collectionName(): string\n\n\tprotected client(): Promise<MongoClient> {\n\t\treturn this._client\n\t}\n\n\tprotected async collection(): Promise<Collection> {\n\t\treturn (await this._client).db().collection(this.collectionName())\n\t}\n\n\tprotected async updateOne(id: string, aggregateRoot: T): Promise<void> {\n\t\tconst collection = await this.collection()\n\n\t\tconst document = { ...aggregateRoot.toPrimitives(), _id: id }\n\n\t\tawait collection.updateOne({ _id: id }, { $set: document }, { upsert: true })\n\t}\n\n\tprotected async insert(aggregateRoot: T): Promise<void> {\n\t\tconst collection = await this.collection()\n\n\t\tconst document = { ...aggregateRoot.toPrimitives() }\n\n\t\tawait collection.insertOne(document)\n\t}\n\n\tprotected async delete(id: string): Promise<void> {\n\t\tconst collection = await this.collection()\n\n\t\tcollection.updateOne({ _id: id }, { $set: { deletedAt: new DateValueObject(new Date()).value } })\n\t}\n}\n"],"version":3}