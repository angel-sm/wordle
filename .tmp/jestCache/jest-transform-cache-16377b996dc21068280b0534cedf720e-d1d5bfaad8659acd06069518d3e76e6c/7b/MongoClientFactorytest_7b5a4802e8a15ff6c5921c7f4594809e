32a71233af5f5e29832abdcf830177ea
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const MongoClientFactory_1 = require("../../../../src/contexts/shared/infrastructure/persistence/mongo/MongoClientFactory");
const mongodb_1 = require("mongodb");
describe('MongoClientFactory', () => {
    const factory = MongoClientFactory_1.MongoClientFactory;
    let client;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        client = yield factory.createClient('test', { url: 'mongodb://localhost:27017/levita-backend-test1' });
    }));
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        yield client.close();
    }));
    it('creates a new client with the connection already established', () => {
        expect(client).toBeInstanceOf(mongodb_1.MongoClient);
    });
    it('creates a new client if it does not exist a client with the given name', () => __awaiter(void 0, void 0, void 0, function* () {
        const newClient = yield factory.createClient('test2', { url: 'mongodb://localhost:27017/levita-backend-test2' });
        expect(newClient).not.toBe(client);
        yield newClient.close();
    }));
    it('returns a client if it already exists', () => __awaiter(void 0, void 0, void 0, function* () {
        const newClient = yield factory.createClient('test', { url: 'mongodb://localhost:27017/levita-backend-test3' });
        expect(newClient).toBe(client);
        yield newClient.close();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxqb3NlYVxcRG9jdW1lbnRzXFx3b3JkbGVcXHRlc3RzXFxjb250ZXh0c1xcc2hhcmVkXFxpbmZyYXN0cnVjdHVyZVxcTW9uZ29DbGllbnRGYWN0b3J5LnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSw0SEFBd0g7QUFDeEgscUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbkMsTUFBTSxPQUFPLEdBQUcsdUNBQWtCLENBQUE7SUFDbEMsSUFBSSxNQUFtQixDQUFBO0lBRXZCLFVBQVUsQ0FBQyxHQUFTLEVBQUU7UUFDckIsTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsZ0RBQWdELEVBQUUsQ0FBQyxDQUFBO0lBQ3ZHLENBQUMsQ0FBQSxDQUFDLENBQUE7SUFFRixTQUFTLENBQUMsR0FBUyxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3JCLENBQUMsQ0FBQSxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsOERBQThELEVBQUUsR0FBRyxFQUFFO1FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMscUJBQVcsQ0FBQyxDQUFBO0lBQzNDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHdFQUF3RSxFQUFFLEdBQVMsRUFBRTtRQUN2RixNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLGdEQUFnRCxFQUFFLENBQUMsQ0FBQTtRQUVoSCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUVsQyxNQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUN4QixDQUFDLENBQUEsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQVMsRUFBRTtRQUN0RCxNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLGdEQUFnRCxFQUFFLENBQUMsQ0FBQTtRQUUvRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRTlCLE1BQU0sU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3hCLENBQUMsQ0FBQSxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGpvc2VhXFxEb2N1bWVudHNcXHdvcmRsZVxcdGVzdHNcXGNvbnRleHRzXFxzaGFyZWRcXGluZnJhc3RydWN0dXJlXFxNb25nb0NsaWVudEZhY3RvcnkudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb25nb0NsaWVudEZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvY29udGV4dHMvc2hhcmVkL2luZnJhc3RydWN0dXJlL3BlcnNpc3RlbmNlL21vbmdvL01vbmdvQ2xpZW50RmFjdG9yeSdcbmltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYidcblxuZGVzY3JpYmUoJ01vbmdvQ2xpZW50RmFjdG9yeScsICgpID0+IHtcblx0Y29uc3QgZmFjdG9yeSA9IE1vbmdvQ2xpZW50RmFjdG9yeVxuXHRsZXQgY2xpZW50OiBNb25nb0NsaWVudFxuXG5cdGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuXHRcdGNsaWVudCA9IGF3YWl0IGZhY3RvcnkuY3JlYXRlQ2xpZW50KCd0ZXN0JywgeyB1cmw6ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L2xldml0YS1iYWNrZW5kLXRlc3QxJyB9KVxuXHR9KVxuXG5cdGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG5cdFx0YXdhaXQgY2xpZW50LmNsb3NlKClcblx0fSlcblxuXHRpdCgnY3JlYXRlcyBhIG5ldyBjbGllbnQgd2l0aCB0aGUgY29ubmVjdGlvbiBhbHJlYWR5IGVzdGFibGlzaGVkJywgKCkgPT4ge1xuXHRcdGV4cGVjdChjbGllbnQpLnRvQmVJbnN0YW5jZU9mKE1vbmdvQ2xpZW50KVxuXHR9KVxuXG5cdGl0KCdjcmVhdGVzIGEgbmV3IGNsaWVudCBpZiBpdCBkb2VzIG5vdCBleGlzdCBhIGNsaWVudCB3aXRoIHRoZSBnaXZlbiBuYW1lJywgYXN5bmMgKCkgPT4ge1xuXHRcdGNvbnN0IG5ld0NsaWVudCA9IGF3YWl0IGZhY3RvcnkuY3JlYXRlQ2xpZW50KCd0ZXN0MicsIHsgdXJsOiAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy9sZXZpdGEtYmFja2VuZC10ZXN0MicgfSlcblxuXHRcdGV4cGVjdChuZXdDbGllbnQpLm5vdC50b0JlKGNsaWVudClcblxuXHRcdGF3YWl0IG5ld0NsaWVudC5jbG9zZSgpXG5cdH0pXG5cblx0aXQoJ3JldHVybnMgYSBjbGllbnQgaWYgaXQgYWxyZWFkeSBleGlzdHMnLCBhc3luYyAoKSA9PiB7XG5cdFx0Y29uc3QgbmV3Q2xpZW50ID0gYXdhaXQgZmFjdG9yeS5jcmVhdGVDbGllbnQoJ3Rlc3QnLCB7IHVybDogJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvbGV2aXRhLWJhY2tlbmQtdGVzdDMnIH0pXG5cblx0XHRleHBlY3QobmV3Q2xpZW50KS50b0JlKGNsaWVudClcblxuXHRcdGF3YWl0IG5ld0NsaWVudC5jbG9zZSgpXG5cdH0pXG59KVxuIl0sInZlcnNpb24iOjN9