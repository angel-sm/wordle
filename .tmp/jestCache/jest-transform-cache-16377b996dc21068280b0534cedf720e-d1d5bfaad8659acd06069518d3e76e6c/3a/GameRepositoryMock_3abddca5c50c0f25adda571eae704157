2a7840f010552845dfecbc3049e45aa7
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameRepositoryMock = void 0;
const Game_1 = require("../../../../../src/contexts/levita/Games/domain/Game");
class GameRepositoryMock {
    constructor() {
        this.mockSave = jest.fn();
    }
    assertLastSavedGameIs(expected) {
        const mock = this.mockSave.mock;
        const lastSavedGame = mock.calls[mock.calls.length - 1][0];
        expect(lastSavedGame).toBeInstanceOf(Game_1.Game);
    }
    create(game) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.mockSave(game);
        });
    }
    findOne(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return null;
        });
    }
    find() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    deleteOne(id) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    update(id, game) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
}
exports.GameRepositoryMock = GameRepositoryMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxqb3NlYVxcRG9jdW1lbnRzXFx3b3JkbGVcXHRlc3RzXFxjb250ZXh0c1xcbGV2aXRhXFxHYW1lc1xcX19tb2Nrc19fXFxHYW1lUmVwb3NpdG9yeU1vY2sudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EsK0VBQTJFO0FBSTNFLE1BQWEsa0JBQWtCO0lBQS9CO1FBQ1MsYUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtJQXVCN0IsQ0FBQztJQXJCQSxxQkFBcUIsQ0FBQyxRQUFjO1FBQ25DLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFBO1FBQy9CLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFTLENBQUE7UUFDbEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxXQUFJLENBQUMsQ0FBQTtJQUMzQyxDQUFDO0lBRUssTUFBTSxDQUFDLElBQVU7O1lBQ3RCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzQixDQUFDO0tBQUE7SUFFSyxPQUFPLENBQUMsRUFBVTs7WUFDdkIsT0FBTyxJQUFJLENBQUE7UUFDWixDQUFDO0tBQUE7SUFFSyxJQUFJOztZQUNULE9BQU8sRUFBRSxDQUFBO1FBQ1YsQ0FBQztLQUFBO0lBRUssU0FBUyxDQUFDLEVBQVU7OERBQWtCLENBQUM7S0FBQTtJQUV2QyxNQUFNLENBQUMsRUFBVSxFQUFFLElBQVU7OERBQWtCLENBQUM7S0FBQTtDQUN0RDtBQXhCRCxnREF3QkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb3NlYVxcRG9jdW1lbnRzXFx3b3JkbGVcXHRlc3RzXFxjb250ZXh0c1xcbGV2aXRhXFxHYW1lc1xcX19tb2Nrc19fXFxHYW1lUmVwb3NpdG9yeU1vY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2FtZVJlcG9zaXRvcnkgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvY29udGV4dHMvbGV2aXRhL0dhbWVzL2RvbWFpbi9HYW1lUmVwb3NpdG9yeSdcclxuaW1wb3J0IHsgR2FtZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NyYy9jb250ZXh0cy9sZXZpdGEvR2FtZXMvZG9tYWluL0dhbWUnXHJcbmltcG9ydCB7IEdhbWVJZCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NyYy9jb250ZXh0cy9sZXZpdGEvc2hhcmVkL2RvbWFpbi9HYW1lcy9HYW1lSWQnXHJcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL2NvbnRleHRzL3NoYXJlZC9kb21haW4vTnVsbGFibGUnXHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZVJlcG9zaXRvcnlNb2NrIGltcGxlbWVudHMgR2FtZVJlcG9zaXRvcnkge1xyXG5cdHByaXZhdGUgbW9ja1NhdmUgPSBqZXN0LmZuKClcclxuXHJcblx0YXNzZXJ0TGFzdFNhdmVkR2FtZUlzKGV4cGVjdGVkOiBHYW1lKTogdm9pZCB7XHJcblx0XHRjb25zdCBtb2NrID0gdGhpcy5tb2NrU2F2ZS5tb2NrXHJcblx0XHRjb25zdCBsYXN0U2F2ZWRHYW1lID0gbW9jay5jYWxsc1ttb2NrLmNhbGxzLmxlbmd0aCAtIDFdWzBdIGFzIEdhbWVcclxuXHRcdGV4cGVjdChsYXN0U2F2ZWRHYW1lKS50b0JlSW5zdGFuY2VPZihHYW1lKVxyXG5cdH1cclxuXHJcblx0YXN5bmMgY3JlYXRlKGdhbWU6IEdhbWUpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdHJldHVybiB0aGlzLm1vY2tTYXZlKGdhbWUpXHJcblx0fVxyXG5cclxuXHRhc3luYyBmaW5kT25lKGlkOiBHYW1lSWQpOiBQcm9taXNlPE51bGxhYmxlPEdhbWU+PiB7XHJcblx0XHRyZXR1cm4gbnVsbFxyXG5cdH1cclxuXHJcblx0YXN5bmMgZmluZCgpOiBQcm9taXNlPE51bGxhYmxlPEdhbWVbXT4+IHtcclxuXHRcdHJldHVybiBbXVxyXG5cdH1cclxuXHJcblx0YXN5bmMgZGVsZXRlT25lKGlkOiBHYW1lSWQpOiBQcm9taXNlPHZvaWQ+IHt9XHJcblxyXG5cdGFzeW5jIHVwZGF0ZShpZDogR2FtZUlkLCBnYW1lOiBHYW1lKTogUHJvbWlzZTx2b2lkPiB7fVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==