d6c86d5c9a33d7b8742b8ba61de091ad
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GameCreator_1 = require("../../../../../src/contexts/levita/Games/application/GameCreator");
const GameMother_1 = require("../domain/GameMother");
const GameRepositoryMock_1 = require("../__mocks__/GameRepositoryMock");
const CreateGameRequestMother_1 = require("./CreateGameRequestMother");
let repository;
let creator;
beforeEach(() => {
    repository = new GameRepositoryMock_1.GameRepositoryMock();
    creator = new GameCreator_1.GameCreator(repository);
});
describe('GameCreator', () => {
    it('should create a valid Game', () => __awaiter(void 0, void 0, void 0, function* () {
        const request = CreateGameRequestMother_1.CreateGameRequestMother.generate();
        const Game = GameMother_1.GameMother.fromRequest(request);
        yield creator.insertGame(request);
        repository.findOne(Game.id);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxqb3NlYVxcRG9jdW1lbnRzXFx3b3JkbGVcXHRlc3RzXFxjb250ZXh0c1xcbGV2aXRhXFxHYW1lc1xcYXBwbGljYXRpb25cXEdhbWVDcmVhdG9yLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxrR0FBOEY7QUFDOUYscURBQWlEO0FBQ2pELHdFQUFvRTtBQUNwRSx1RUFBbUU7QUFFbkUsSUFBSSxVQUE4QixDQUFBO0FBQ2xDLElBQUksT0FBb0IsQ0FBQTtBQUV4QixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2YsVUFBVSxHQUFHLElBQUksdUNBQWtCLEVBQUUsQ0FBQTtJQUNyQyxPQUFPLEdBQUcsSUFBSSx5QkFBVyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3RDLENBQUMsQ0FBQyxDQUFBO0FBRUYsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDNUIsRUFBRSxDQUFDLDRCQUE0QixFQUFFLEdBQVMsRUFBRTtRQUMzQyxNQUFNLE9BQU8sR0FBRyxpREFBdUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUVsRCxNQUFNLElBQUksR0FBRyx1QkFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUU1QyxNQUFNLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFakMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDNUIsQ0FBQyxDQUFBLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9zZWFcXERvY3VtZW50c1xcd29yZGxlXFx0ZXN0c1xcY29udGV4dHNcXGxldml0YVxcR2FtZXNcXGFwcGxpY2F0aW9uXFxHYW1lQ3JlYXRvci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdhbWVDcmVhdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL2NvbnRleHRzL2xldml0YS9HYW1lcy9hcHBsaWNhdGlvbi9HYW1lQ3JlYXRvcidcclxuaW1wb3J0IHsgR2FtZU1vdGhlciB9IGZyb20gJy4uL2RvbWFpbi9HYW1lTW90aGVyJ1xyXG5pbXBvcnQgeyBHYW1lUmVwb3NpdG9yeU1vY2sgfSBmcm9tICcuLi9fX21vY2tzX18vR2FtZVJlcG9zaXRvcnlNb2NrJ1xyXG5pbXBvcnQgeyBDcmVhdGVHYW1lUmVxdWVzdE1vdGhlciB9IGZyb20gJy4vQ3JlYXRlR2FtZVJlcXVlc3RNb3RoZXInXHJcblxyXG5sZXQgcmVwb3NpdG9yeTogR2FtZVJlcG9zaXRvcnlNb2NrXHJcbmxldCBjcmVhdG9yOiBHYW1lQ3JlYXRvclxyXG5cclxuYmVmb3JlRWFjaCgoKSA9PiB7XHJcblx0cmVwb3NpdG9yeSA9IG5ldyBHYW1lUmVwb3NpdG9yeU1vY2soKVxyXG5cdGNyZWF0b3IgPSBuZXcgR2FtZUNyZWF0b3IocmVwb3NpdG9yeSlcclxufSlcclxuXHJcbmRlc2NyaWJlKCdHYW1lQ3JlYXRvcicsICgpID0+IHtcclxuXHRpdCgnc2hvdWxkIGNyZWF0ZSBhIHZhbGlkIEdhbWUnLCBhc3luYyAoKSA9PiB7XHJcblx0XHRjb25zdCByZXF1ZXN0ID0gQ3JlYXRlR2FtZVJlcXVlc3RNb3RoZXIuZ2VuZXJhdGUoKVxyXG5cclxuXHRcdGNvbnN0IEdhbWUgPSBHYW1lTW90aGVyLmZyb21SZXF1ZXN0KHJlcXVlc3QpXHJcblxyXG5cdFx0YXdhaXQgY3JlYXRvci5pbnNlcnRHYW1lKHJlcXVlc3QpXHJcblxyXG5cdFx0cmVwb3NpdG9yeS5maW5kT25lKEdhbWUuaWQpXHJcblx0fSlcclxufSlcclxuIl0sInZlcnNpb24iOjN9