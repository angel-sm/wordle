cd1b69f14b7304a8d5ecec795d57145d
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dependency_injection_1 = __importDefault(require("../../../../../../src/apps/levita/backend/dependency-injection"));
const GameMother_1 = require("../../domain/GameMother");
const repository = dependency_injection_1.default.get('Levita.Games.domain.GameRepository');
const environmentArranger = dependency_injection_1.default.get('Levita.EnvironmentArranger');
beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
    yield (yield environmentArranger).arrange();
}));
afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
    yield (yield environmentArranger).arrange();
    yield (yield environmentArranger).close();
}));
describe('GameRepository', () => {
    describe('#save', () => {
        it('should save a Game', () => __awaiter(void 0, void 0, void 0, function* () {
            const game = GameMother_1.GameMother.generate();
            yield repository.create(game);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxqb3NlYVxcRG9jdW1lbnRzXFx3b3JkbGVcXHRlc3RzXFxjb250ZXh0c1xcbGV2aXRhXFxHYW1lc1xcaW5mcmFzdHJ1Y3R1cmVcXHBlcnNpc3RlbmNlXFxHYW1lUmVwb3NpdG9yeS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsMEhBQXVGO0FBR3ZGLHdEQUFxRDtBQUVyRCxNQUFNLFVBQVUsR0FBbUIsOEJBQVMsQ0FBQyxHQUFHLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUN2RixNQUFNLG1CQUFtQixHQUFpQyw4QkFBUyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRXRHLFVBQVUsQ0FBQyxHQUFTLEVBQUU7SUFDcEIsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM5QyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLEdBQVMsRUFBRTtJQUNsQixNQUFNLENBQUMsTUFBTSxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzVDLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDNUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDckIsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEdBQVMsRUFBRTtZQUNsQyxNQUFNLElBQUksR0FBRyx1QkFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRW5DLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGpvc2VhXFxEb2N1bWVudHNcXHdvcmRsZVxcdGVzdHNcXGNvbnRleHRzXFxsZXZpdGFcXEdhbWVzXFxpbmZyYXN0cnVjdHVyZVxccGVyc2lzdGVuY2VcXEdhbWVSZXBvc2l0b3J5LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCBjb250YWluZXIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcHMvbGV2aXRhL2JhY2tlbmQvZGVwZW5kZW5jeS1pbmplY3Rpb24nO1xyXG5pbXBvcnQgeyBHYW1lUmVwb3NpdG9yeSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb250ZXh0cy9sZXZpdGEvR2FtZXMvZG9tYWluL0dhbWVSZXBvc2l0b3J5JztcclxuaW1wb3J0IHsgRW52aXJvbm1lbnRBcnJhbmdlciB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9pbmZyYXN0cnVjdHVyZS9hcnJhbmdlci9FbnZpcm9ubWVudEFycmFuZ2VyJztcclxuaW1wb3J0IHsgR2FtZU1vdGhlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9HYW1lTW90aGVyJztcclxuXHJcbmNvbnN0IHJlcG9zaXRvcnk6IEdhbWVSZXBvc2l0b3J5ID0gY29udGFpbmVyLmdldCgnTGV2aXRhLkdhbWVzLmRvbWFpbi5HYW1lUmVwb3NpdG9yeScpO1xyXG5jb25zdCBlbnZpcm9ubWVudEFycmFuZ2VyOiBQcm9taXNlPEVudmlyb25tZW50QXJyYW5nZXI+ID0gY29udGFpbmVyLmdldCgnTGV2aXRhLkVudmlyb25tZW50QXJyYW5nZXInKTtcclxuXHJcbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gIGF3YWl0IChhd2FpdCBlbnZpcm9ubWVudEFycmFuZ2VyKS5hcnJhbmdlKCk7XHJcbn0pO1xyXG5cclxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xyXG4gIGF3YWl0IChhd2FpdCBlbnZpcm9ubWVudEFycmFuZ2VyKS5hcnJhbmdlKCk7XHJcbiAgYXdhaXQgKGF3YWl0IGVudmlyb25tZW50QXJyYW5nZXIpLmNsb3NlKCk7XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ0dhbWVSZXBvc2l0b3J5JywgKCkgPT4ge1xyXG4gIGRlc2NyaWJlKCcjc2F2ZScsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgc2F2ZSBhIEdhbWUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGdhbWUgPSBHYW1lTW90aGVyLmdlbmVyYXRlKCk7XHJcblxyXG4gICAgICBhd2FpdCByZXBvc2l0b3J5LmNyZWF0ZShnYW1lKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9