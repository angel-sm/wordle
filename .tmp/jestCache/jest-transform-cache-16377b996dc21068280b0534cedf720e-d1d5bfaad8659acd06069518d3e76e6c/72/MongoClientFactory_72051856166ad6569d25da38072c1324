3b6606cbf3ba26a30ac1195481a1f608
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoClientFactory = void 0;
const mongodb_1 = require("mongodb");
class MongoClientFactory {
    static createClient(contextName, config) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = MongoClientFactory.getClient(contextName);
            if (!client) {
                client = yield MongoClientFactory.createAndConnectClient(config);
                MongoClientFactory.registerClient(client, contextName);
            }
            return client;
        });
    }
    static getClient(contextName) {
        return MongoClientFactory.clients[contextName];
    }
    static createAndConnectClient(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const client = new mongodb_1.MongoClient(config.url);
            yield client.connect();
            return client;
        });
    }
    static registerClient(client, contextName) {
        MongoClientFactory.clients[contextName] = client;
    }
}
exports.MongoClientFactory = MongoClientFactory;
MongoClientFactory.clients = {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxqb3NlYVxcRG9jdW1lbnRzXFx3b3JkbGVcXHNyY1xcQ29udGV4dHNcXHNoYXJlZFxcaW5mcmFzdHJ1Y3R1cmVcXHBlcnNpc3RlbmNlXFxtb25nb1xcTW9uZ29DbGllbnRGYWN0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHFDQUFxQztBQUdyQyxNQUFhLGtCQUFrQjtJQUc5QixNQUFNLENBQU8sWUFBWSxDQUFDLFdBQW1CLEVBQUUsTUFBbUI7O1lBQ2pFLElBQUksTUFBTSxHQUFHLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUV0RCxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNaLE1BQU0sR0FBRyxNQUFNLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFBO2dCQUVoRSxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFBO2FBQ3REO1lBRUQsT0FBTyxNQUFNLENBQUE7UUFDZCxDQUFDO0tBQUE7SUFFTyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQW1CO1FBQzNDLE9BQU8sa0JBQWtCLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFFTyxNQUFNLENBQU8sc0JBQXNCLENBQUMsTUFBbUI7O1lBQzlELE1BQU0sTUFBTSxHQUFHLElBQUkscUJBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFFMUMsTUFBTSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7WUFFdEIsT0FBTyxNQUFNLENBQUE7UUFDZCxDQUFDO0tBQUE7SUFFTyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQW1CLEVBQUUsV0FBbUI7UUFDckUsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sQ0FBQTtJQUNqRCxDQUFDOztBQTdCRixnREE4QkM7QUE3QmUsMEJBQU8sR0FBbUMsRUFBRSxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9zZWFcXERvY3VtZW50c1xcd29yZGxlXFxzcmNcXENvbnRleHRzXFxzaGFyZWRcXGluZnJhc3RydWN0dXJlXFxwZXJzaXN0ZW5jZVxcbW9uZ29cXE1vbmdvQ2xpZW50RmFjdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gJ21vbmdvZGInXG5pbXBvcnQgTW9uZ29Db25maWcgZnJvbSAnLi9Nb25nb0NvbmZpZydcblxuZXhwb3J0IGNsYXNzIE1vbmdvQ2xpZW50RmFjdG9yeSB7XG5cdHByaXZhdGUgc3RhdGljIGNsaWVudHM6IHsgW2tleTogc3RyaW5nXTogTW9uZ29DbGllbnQgfSA9IHt9XG5cblx0c3RhdGljIGFzeW5jIGNyZWF0ZUNsaWVudChjb250ZXh0TmFtZTogc3RyaW5nLCBjb25maWc6IE1vbmdvQ29uZmlnKTogUHJvbWlzZTxNb25nb0NsaWVudD4ge1xuXHRcdGxldCBjbGllbnQgPSBNb25nb0NsaWVudEZhY3RvcnkuZ2V0Q2xpZW50KGNvbnRleHROYW1lKVxuXG5cdFx0aWYgKCFjbGllbnQpIHtcblx0XHRcdGNsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50RmFjdG9yeS5jcmVhdGVBbmRDb25uZWN0Q2xpZW50KGNvbmZpZylcblxuXHRcdFx0TW9uZ29DbGllbnRGYWN0b3J5LnJlZ2lzdGVyQ2xpZW50KGNsaWVudCwgY29udGV4dE5hbWUpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsaWVudFxuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgZ2V0Q2xpZW50KGNvbnRleHROYW1lOiBzdHJpbmcpOiBNb25nb0NsaWVudCB8IG51bGwge1xuXHRcdHJldHVybiBNb25nb0NsaWVudEZhY3RvcnkuY2xpZW50c1tjb250ZXh0TmFtZV1cblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGFzeW5jIGNyZWF0ZUFuZENvbm5lY3RDbGllbnQoY29uZmlnOiBNb25nb0NvbmZpZyk6IFByb21pc2U8TW9uZ29DbGllbnQ+IHtcblx0XHRjb25zdCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQoY29uZmlnLnVybClcblxuXHRcdGF3YWl0IGNsaWVudC5jb25uZWN0KClcblxuXHRcdHJldHVybiBjbGllbnRcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIHJlZ2lzdGVyQ2xpZW50KGNsaWVudDogTW9uZ29DbGllbnQsIGNvbnRleHROYW1lOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRNb25nb0NsaWVudEZhY3RvcnkuY2xpZW50c1tjb250ZXh0TmFtZV0gPSBjbGllbnRcblx0fVxufVxuIl0sInZlcnNpb24iOjN9